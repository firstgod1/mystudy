fork : git1 fork 了git2的仓库后 会自己生成一个 一模一样的仓库(复制/克隆)
git status 查看状态
git 工作区域

git repository(git仓库)

暂存区

工作区 -> 暂存区 : git add hello.php  git add test.php 

暂存区 -》 git仓库  git commit -m "提交描述" 

1.设置用户名

git config --global user.name 'firstgod1'

2.设置用户名邮箱
git config --global user.email '947006718@qq.com'

3.查看设置
git config --list

一、在文件夹内初始化git
git init 
二、将文件提交到暂存区
git add hello.php
三、将暂存区文件提交到GitHub仓库
git commit -m "提交描述" 

删除本地仓库
rm 删除工作区文件
git rm test.php 从Git中删除
git commit -m '' 提交操作

1.克隆仓库到本地
git clone  仓库地址
2.将工作区文件提交到暂存区
3.将暂存区文件提交到本地仓库
4.将本地仓库上传到远程仓库
git push 

转换到另个分支
git checkout -b new_branch

合并分支
git merge new_branch

绑定远程仓库
git remote add origin https://github.com/firstgod1/mystudy.git

查看已提交的状态
git log 

取消上一次的提交，并将暂存区的东西重新提交
git commit --amend

拉取暂存区的文件并替换工作区的文件
git checkout -- "filename"

拉取最近的一次提交到版本库的文件到暂存区
git reset HEAD index.php

查看已提交的状态
git log --oneline

取消工作区的上次所有的修改
git checkout -- 


删除过程
先将工作区的东西删除
再通过 git add . 将暂存区的东西删除

将工作区和暂存区的一起删除
git rm index.html
--catch 仅仅删除暂存区的文件

将工作区和暂存区的文件都修改
git mv 

创建分支dev
git branch dev
查看分支git branch

删除分支
git branch -d dev

改分支的名字
git branch -m 'yuan'  'mudi'


创建分支，并切换到分支
git branch -b aa 

和dev上的分支合并
git merge dev



git commit -lm ''

查看分支的区别
git diff 版本号1 版本号2

和dev分支的比较
git diff dev



将两个分支的工作区封存并将工作区的修改撤销
git stash
查看封存的文件
git stash list

将封存的文件恢复
git stash apply stash@{0}

将封存的文件恢复并删除stash@{0}
git stash pop stash@{0}

将封存的文件删除stash@{0}
git stash drop stash@{0}
